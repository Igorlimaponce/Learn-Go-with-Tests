# 🚀 Learn Go with Tests - My Journey

[![Go Version](https://img.shields.io/badge/Go-1.25.3-00ADD8?style=flat&logo=go)](https://golang.org/)
[![Tests](https://img.shields.io/badge/tests-passing-brightgreen)](https://github.com/IgorLimaPonce/learn-go-with-tests)
[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)

Este repositório documenta minha jornada de aprendizado em Go, seguindo o excelente guia [Learn Go with Tests](https://quii.gitbook.io/learn-go-with-tests/) de Chris James.

## 📚 Sobre o Projeto

Estou estudando Go com foco em **Test-Driven Development (TDD)**, uma metodologia que prioriza a escrita de testes antes da implementação. Este repositório contém todos os exercícios e desafios que completei durante o curso.

### 🎯 Objetivos de Aprendizado

- ✅ Dominar a sintaxe e fundamentos de Go
- ✅ Aplicar TDD no desenvolvimento diário
- ✅ Compreender os padrões e melhores práticas da linguagem
- ✅ Construir software robusto e testável
- ✅ Desenvolver habilidades em testes unitários e de integração

## 📂 Estrutura do Repositório

```
learn-go-with-tests/
├── hello-world/         # Primeiros passos: Hello World com testes
│   ├── hello.go
│   └── hello_test.go
├── integers/            # Operações com inteiros e documentação
│   ├── adder.go
│   └── adder_test.go
├── iteration/           # Loops e performance com benchmarks
│   ├── iteration.go
│   └── iteration_test.go
├── arrays_slices/       # Arrays, slices e parâmetros variádicos
│   ├── arrays_slices.go
│   └── arrays_slices_test.go
├── TDD-types/           # Documentação sobre tipos de testes em Go
│   └── TDD_test.go
├── go.mod               # Gerenciamento de módulos Go
└── README.md
```

## 🏃 Como Executar

### Pré-requisitos

- Go 1.25.3 ou superior instalado ([Download Go](https://golang.org/dl/))

### Executar o Projeto

```bash
# Clone o repositório
git clone https://github.com/IgorLimaPonce/learn-go-with-tests.git
cd learn-go-with-tests

# Executar um exemplo específico
cd hello-world
go run hello.go
```

### Executar os Testes

```bash
# Executar todos os testes
go test ./...

# Executar testes de um módulo específico
cd arrays_slices
go test -v

# Executar testes com coverage
go test -cover ./...

# Executar benchmarks
cd iteration
go test -bench=.
```

## 📖 Módulos Completados

### ✅ 1. Hello World
- **Conceitos aprendidos:** 
  - Funções básicas
  - Testes com `*testing.T`
  - Subtestes com `t.Run()`
  - Helper functions com `t.Helper()`
  - Switch statements
  - Múltiplos idiomas (English, Spanish, French)
- **Arquivos:** [`hello.go`](hello-world/hello.go), [`hello_test.go`](hello-world/hello_test.go)
- **Status:** ✅ Concluído

### ✅ 2. Integers
- **Conceitos aprendidos:**
  - Operações aritméticas básicas
  - Documentação com comentários
  - Examples tests para documentação
  - Formatação com `%d` para inteiros
- **Arquivos:** [`adder.go`](integers/adder.go), [`adder_test.go`](integers/adder_test.go)
- **Status:** ✅ Concluído

### ✅ 3. Iteration
- **Conceitos aprendidos:**
  - Loops com `for`
  - Performance com `strings.Builder`
  - Benchmarks com `*testing.B` e `b.Loop()`
  - Otimização de concatenação de strings
  - Example tests com Output comments
- **Arquivos:** [`iteration.go`](iteration/iteration.go), [`iteration_test.go`](iteration/iteration_test.go)
- **Destaques:** Melhoria de 50% na performance usando `strings.Builder` ao invés de concatenação direta
- **Status:** ✅ Concluído

### ✅ 4. Arrays and Slices
- **Conceitos aprendidos:**
  - Diferença entre Arrays `[5]int` e Slices `[]int`
  - Iteração com `range` (valor vs índice)
  - Parâmetros variádicos `...[]int`
  - Slice de slices `[][]int`
  - Funções `append()` e `make()`
  - Slicing com `slice[1:]` (pegar tail)
  - Comparação de slices com `slices.Equal()`
  - Helper functions para testes reutilizáveis
- **Arquivos:** [`arrays_slices.go`](arrays_slices/arrays_slices.go), [`arrays_slices_test.go`](arrays_slices/arrays_slices_test.go)
- **Funções implementadas:**
  - `SumArray()` - Soma de arrays
  - `SumSlices()` - Soma de slices
  - `SumAll()` - Soma múltiplos slices
  - `SumAllAlternative()` - Versão com `make()`
  - `SumAllAlternative2()` - Versão com `append()`
  - `SumAllTails()` - Soma excluindo primeiro elemento
- **Status:** ✅ Concluído

### 📚 TDD Types (Documentação)
- **Conceitos documentados:**
  - `func Test*` - Testes unitários básicos
  - `func Example*` - Testes com output para documentação
  - `func Benchmark*` - Testes de performance
- **Arquivo:** [`TDD_test.go`](TDD-types/TDD_test.go)

### 🔜 Próximos Passos
- [ ] Structs, Methods & Interfaces
- [ ] Pointers & Errors
- [ ] Maps
- [ ] Dependency Injection
- [ ] Mocking
- [ ] Concurrency
- [ ] Select
- [ ] Reflection
- [ ] Sync
- [ ] Context
- [ ] Property Based Tests

## 💡 Principais Aprendizados

### Test-Driven Development (TDD)
O ciclo TDD que estou praticando:

1. **Red** 🔴 - Escrever um teste que falha
2. **Green** 🟢 - Escrever código mínimo para passar no teste
3. **Refactor** 🔄 - Melhorar o código mantendo os testes passando

### Boas Práticas em Go

#### Testes
- Arquivos de teste devem ter o sufixo `_test.go`
- Funções de teste devem começar com `Test`
- Usar `*testing.T` para reportar falhas
- Subtestes com `t.Run()` para organização
- `t.Helper()` para melhor debugging
- Manter testes simples e legíveis

#### Performance
- Usar `strings.Builder` para concatenação eficiente
- Benchmarks para medir performance
- Preferir `slices.Equal()` para comparar slices

#### Código
- Preferir `for _, value := range slice` quando não precisa do índice
- Usar parâmetros variádicos `...Type` para flexibilidade
- Arrays têm tamanho fixo `[5]int`, slices são dinâmicos `[]int`
- `make()` pré-aloca capacidade, `append()` cresce dinamicamente

### Comparações de Performance

**Iteration Module:**
- ✅ Concatenação direta: ~2x mais lento
- ✅ `strings.Builder`: 50% mais rápido + menor uso de memória

## 🛠️ Tecnologias

- **Linguagem:** Go 1.25.3
- **Framework de Testes:** `testing` (biblioteca padrão)
- **Metodologia:** Test-Driven Development (TDD)
- **Bibliotecas utilizadas:**
  - `strings` - Manipulação de strings
  - `slices` - Operações com slices
  - `fmt` - Formatação e I/O

## 📊 Estatísticas do Projeto

- **Módulos concluídos:** 4/15 (27%)
- **Testes escritos:** 15+
- **Benchmarks:** 1
- **Examples:** 4
- **Linhas de código:** ~300+

## 📚 Recursos

- [Learn Go with Tests - GitBook](https://quii.gitbook.io/learn-go-with-tests/)
- [Documentação Oficial do Go](https://golang.org/doc/)
- [Go by Example](https://gobyexample.com/)
- [Effective Go](https://golang.org/doc/effective_go)
- [Go Package Documentation](https://pkg.go.dev/)

## 🤝 Contribuições

Este é um repositório pessoal de estudos, mas sugestões e feedbacks são sempre bem-vindos! Sinta-se à vontade para abrir uma issue ou enviar sugestões.

## 📝 Licença

Este projeto está sob a licença MIT. Veja o arquivo [LICENSE](LICENSE) para mais detalhes.

## 👨‍💻 Autor

**Igor L**

- Estudante dedicado de Go
- Apaixonado por código limpo e testes
- Sempre em busca de aprender e melhorar
- Focado em TDD e boas práticas

---

⭐ Se este repositório foi útil para você, considere dar uma estrela!

💬 Dúvidas ou sugestões? Abra uma issue!

*Última atualização: Janeiro 2025*